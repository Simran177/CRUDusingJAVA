/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.capp.dao;
// this class communicates to database, handling it

import com.mycompany.capp.domain.User;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

// Repository is handilng database
@Repository
public class UserDAOImpl extends BaseDAO implements UserDAO{

    @Override
    public void save(User u) {
        //named parameter are declared using colon
        String sql= "Insert into user(name,phone,email,address,loginName,password,role,loginStatus)" +
                " Values(:name,:phone,:email,:address,:loginName,:password,:role,:loginStatus)";
 //bind values
                Map m= new HashMap();
                m.put("name",u.getName());
                m.put("phone",u.getPhone());
                m.put("email",u.getEmail());
                m.put("address",u.getAddress());
                m.put("loginName",u.getLoginName());
                m.put("password",u.getPassword());
                m.put("role",u.getRole());
                m.put("loginStatus",u.getLoginStatus());
                
                //keyholder object will bind the value which is auto-incremented and generated by database
                KeyHolder kh= new GeneratedKeyHolder();
                //parameter source object represents from where the parameters will be taken from named parameter
                SqlParameterSource ps= new MapSqlParameterSource(m);
                //below method is inherited from parent class
                super.getNamedParameterJdbcTemplate().update(sql, ps,kh); 
                Integer userId= kh.getKey().intValue();
                u.setUserId(userId);
                }

    @Override
    public void update(User u) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void delete(User u) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void delete(Integer userId) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public User findById(Integer userId) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<User> findAll() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<User> findByProperty(String propName, Object propValue) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
