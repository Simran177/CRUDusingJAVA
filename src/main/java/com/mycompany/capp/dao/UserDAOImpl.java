/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.capp.dao;
// this class communicates to database, handling it

import com.mycompany.capp.domain.User;
import com.mycompany.capp.rm.UserRowMapper;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

// Repository is handilng database
@Repository
public class UserDAOImpl extends BaseDAO implements UserDAO{

    @Override
    public void save(User u) {
        //named parameter are declared using colon
        String sql= "Insert into user(name,phone,email,address,loginName,password,role,loginStatus)" +
                " Values(:name,:phone,:email,:address,:loginName,:password,:role,:loginStatus)";
 //bind values
                Map m= new HashMap();
                m.put("name",u.getName());
                m.put("phone",u.getPhone());
                m.put("email",u.getEmail());
                m.put("address",u.getAddress());
                m.put("loginName",u.getLoginName());
                m.put("password",u.getPassword());
                m.put("role",u.getRole());
                m.put("loginStatus",u.getLoginStatus());
                
                //keyholder object will bind the value which is auto-incremented and generated by database
                KeyHolder kh= new GeneratedKeyHolder();
                //parameter source object represents from where the parameters will be taken from named parameter
                SqlParameterSource ps= new MapSqlParameterSource(m);
                //below method is inherited from parent class
                super.getNamedParameterJdbcTemplate().update(sql, ps,kh); 
                Integer userId= kh.getKey().intValue();
                u.setUserId(userId);
                }

    @Override
    public void update(User u) {
        String sql = "UPDATE user"
                + " SET name = :name,"
                + " phone =:phone,"
                + " email=:email," 
                + " address =:address,"
                + " role=:role,"
                + " loginStatus=:loginStatus "
                + " WHERE userId = :userId";
        //bind values
        Map m = new HashMap();
        m.put("name",u.getName());
        m.put("phone",u.getPhone());
        m.put("email",u.getEmail());
        m.put("address",u.getAddress());
        m.put("role",u.getRole());
        m.put("loginStatus",u.getLoginStatus());
        m.put("userId", u.getUserId());
        getNamedParameterJdbcTemplate().update(sql, m);
    }

    @Override
    public void delete(User u) {
        this.delete(u.getUserId());
    }

    @Override
    public void delete(Integer userId) {
        String sql = "DELETE FROM user WHERE userId=?";
        getJdbcTemplate().update(sql, userId);
    }

    @Override
    public User findById(Integer userId) {
        // findById means 1 primary key value passed and only 1 record is available for it
        String sql = "SELECT userId, name, phone, email, address, loginName, role, loginStatus"
                + " FROM user WHERE userId=?";
        //when single record is need to be fetched from database, we use queryForObject
        User u = getJdbcTemplate().queryForObject(sql, new UserRowMapper(), userId);
        return u;
    }

    @Override
    public List<User> findAll() {
        String sql = "SELECT userId, name, phone, email, address, loginName, role, loginStatus"
                + " FROM user";
        List<User> u = getJdbcTemplate().query(sql, new UserRowMapper());
        return u;    
    }

    @Override
    public List<User> findByProperty(String propName, Object propValue) {
        String sql = "SELECT userId, name, phone, email, address, loginName, role, loginStatus"
                + " FROM user WHERE "+propName+" =?";
        List<User> u = getJdbcTemplate().query(sql, new UserRowMapper(), propValue);
        return u;   
    }
    
}
